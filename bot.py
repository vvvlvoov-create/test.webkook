import os
import logging
from datetime import datetime, time, timedelta
import pytz
from dotenv import load_dotenv
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
    print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã telegram —Ä–∞–±–æ—Ç–∞—é—Ç!")
except ImportError as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7719252121:AAEUyzzdo1JjYVfNv1uN_Y7PQFHR6de3T1o')
CHAT_ID = os.environ.get('CHAT_ID', '@kfblackrussia')
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å CHAT_ID: {CHAT_ID}")

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
SERVERS = {
    'üëÆ‚Äç‚ôÇ–ß–µ—Ä–µ–ø–æ–≤–µ—Ü': '–ß–µ—Ä–µ–ø–æ–≤–µ—Ü',
    'üêÄ–ú–∞–≥–∞–¥–∞–Ω': '–ú–∞–≥–∞–¥–∞–Ω',
    'üè∞ –ü–æ–¥–æ–ª—å—Å–∫': '–ü–æ–¥–æ–ª—å—Å–∫',
    'üèô –°—É—Ä–≥—É—Ç': '–°—É—Ä–≥—É—Ç',
    'üèç –ò–∂–µ–≤—Å–∫': '–ò–∂–µ–≤—Å–∫',
    'üéÑ –¢–æ–º—Å–∫': '–¢–æ–º—Å–∫',
    'üêø –¢–≤–µ—Ä—å': '–¢–≤–µ—Ä—å',
    'üê¶‚Äçüî• –í–æ–ª–æ–≥–¥–∞': '–í–æ–ª–æ–≥–¥–∞',
    'ü¶Å –¢–∞–≥–∞–Ω—Ä–æ–≥': '–¢–∞–≥–∞–Ω—Ä–æ–≥',
    'üåº –ù–æ–≤–≥–æ—Ä–æ–¥': '–ù–æ–≤–≥–æ—Ä–æ–¥',
    'ü´ê –ö–∞–ª—É–≥–∞': '–ö–∞–ª—É–≥–∞',
    'üòπ –í–ª–∞–¥–∏–º–∏—Ä': '–í–ª–∞–¥–∏–º–∏—Ä',
    'üê≤ –ö–æ—Å—Ç—Ä–æ–º–∞': '–ö–æ—Å—Ç—Ä–æ–º–∞',
    'ü¶é –ß–∏—Ç–∞': '–ß–∏—Ç–∞',
    'üß£ –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å': '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å',
    'üëú –ë—Ä–∞—Ç—Å–∫': '–ë—Ä–∞—Ç—Å–∫',
    'ü•ê –¢–∞–º–±–æ–≤': '–¢–∞–º–±–æ–≤',
    'ü•Ω –Ø–∫—É—Ç—Å–∫': '–Ø–∫—É—Ç—Å–∫',
    'üç≠ –£–ª—å—è–Ω–æ–≤—Å–∫': '–£–ª—å—è–Ω–æ–≤—Å–∫',
    'üéà –õ–∏–ø–µ—Ü–∫': '–õ–∏–ø–µ—Ü–∫',
    'üí¶ –ë–∞—Ä–Ω–∞—É–ª': '–ë–∞—Ä–Ω–∞—É–ª',
    'üèõ –Ø—Ä–æ—Å–ª–∞–≤–ª—å': '–Ø—Ä–æ—Å–ª–∞–≤–ª—å',
    'ü¶Ö –û—Ä–µ–ª': '–û—Ä–µ–ª',
    'üß∏ –ë—Ä—è–Ω—Å–∫': '–ë—Ä—è–Ω—Å–∫',
    'ü™≠ –ü—Å–∫–æ–≤': '–ü—Å–∫–æ–≤',
    'ü´ö –°–º–æ–ª–µ–Ω—Å–∫': '–°–º–æ–ª–µ–Ω—Å–∫',
    'ü™º –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å': '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å',
    'ü™Ö –ò–≤–∞–Ω–æ–≤–æ': '–ò–≤–∞–Ω–æ–≤–æ',
    'ü™∏ –¢–æ–ª—å—è—Ç—Ç–∏': '–¢–æ–ª—å—è—Ç—Ç–∏',
    'üêã –¢—é–º–µ–Ω—å': '–¢—é–º–µ–Ω—å',
    'üå∫ –ö–µ–º–µ—Ä–æ–≤–æ': '–ö–µ–º–µ—Ä–æ–≤–æ',
    'üî´ –ö–∏—Ä–æ–≤': '–ö–∏—Ä–æ–≤',
    'üçñ –û—Ä–µ–Ω–±—É—Ä–≥': '–û—Ä–µ–Ω–±—É—Ä–≥',
    'ü•ã –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫': '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫',
    'üÉè –ö—É—Ä—Å–∫': '–ö—É—Ä—Å–∫',
    'üé≥ –ú—É—Ä–º–∞–Ω—Å–∫': '–ú—É—Ä–º–∞–Ω—Å–∫',
    'üé∑ –ü–µ–Ω–∑–∞': '–ü–µ–Ω–∑–∞',
    'üé≠ –†—è–∑–∞–Ω—å': '–†—è–∑–∞–Ω—å',
    '‚õ≥ –¢—É–ª–∞': '–¢—É–ª–∞',
    'üèü –ü–µ—Ä–º—å': '–ü–µ—Ä–º—å',
    'üê® –•–∞–±–∞—Ä–æ–≤—Å–∫': '–•–∞–±–∞—Ä–æ–≤—Å–∫',
    'ü™Ñ –ß–µ–±–æ–∫—Å–∞—Ä—ã': '–ß–µ–±–æ–∫—Å–∞—Ä—ã',
    'üñá –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
    'üïä –ß–µ–ª—è–±–∏–Ω—Å–∫': '–ß–µ–ª—è–±–∏–Ω—Å–∫',
    'üëí –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥',
    'üß∂ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
    'üåÇ –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑': '–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑',
    '‚õëÔ∏è –ú–∞—Ö–∞—á–∫–∞–ª–∞': '–ú–∞—Ö–∞—á–∫–∞–ª–∞',
    'üéì –ë–µ–ª–≥–æ—Ä–æ–¥': '–ë–µ–ª–≥–æ—Ä–æ–¥',
    'üëë –í–æ—Ä–æ–Ω–µ–∂': '–í–æ—Ä–æ–Ω–µ–∂',
    'üéí –í–æ–ª–≥–æ–≥—Ä–∞–¥': '–í–æ–ª–≥–æ–≥—Ä–∞–¥',
    'üå™ –ò—Ä–∫—É—Ç—Å–∫': '–ò—Ä–∫—É—Ç—Å–∫',
    'ü™ô –û–º—Å–∫': '–û–º—Å–∫',
    'üêâ –°–∞—Ä–∞—Ç–æ–≤': '–°–∞—Ä–∞—Ç–æ–≤',
    'üçô –ì—Ä–æ–∑–Ω—ã–π': '–ì—Ä–æ–∑–Ω—ã–π',
    'üçÉ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
    'ü™ø –ê—Ä–∑–∞–º–∞—Å': '–ê—Ä–∑–∞–º–∞—Å',
    'ü™ª –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
    'üìó –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
    'ü™∫ –ê–Ω–∞–ø–∞': '–ê–Ω–∞–ø–∞',
    'üç∫ –†–æ—Å—Ç–æ–≤': '–†–æ—Å—Ç–æ–≤',
    'üéß –°–∞–º–∞—Ä–∞': '–°–∞–º–∞—Ä–∞',
    'üèõ –ö–∞–∑–∞–Ω—å': '–ö–∞–∑–∞–Ω—å',
    'üåä –°–æ—á–∏': '–°–æ—á–∏',
    'üå™ –£—Ñ–∞': '–£—Ñ–∞',
    'üåâ –°–ü–±': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    'üåá –ú–æ—Å–∫–≤–∞': '–ú–æ—Å–∫–≤–∞'
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_states = {}
rr_entries = []  # –•—Ä–∞–Ω–∏—Ç –∑–∞–ø–∏—Å–∏ RR –ª–∏—Å—Ç–∞
pd_entries = []  # –•—Ä–∞–Ω–∏—Ç –∑–∞–ø–∏—Å–∏ PD –ª–∏—Å—Ç–∞

# –í—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û
PD_POST_TIME = time(5, 0, 0, tzinfo=MOSCOW_TZ)  # 05:00 –ú–°–ö - PD –ª–∏—Å—Ç
RR_POST_TIME = time(0, 0, 0, tzinfo=MOSCOW_TZ)  # 00:00 –ú–°–ö - RR –ª–∏—Å—Ç

def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å RR –ª–∏—Å—Ç", callback_data="fill_rr")],
        [InlineKeyboardButton("üè• –ó–∞–ø–æ–ª–Ω–∏—Ç—å PD –ª–∏—Å—Ç", callback_data="fill_pd")],
        [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏—Å—Ç—ã", callback_data="view_lists")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_server_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
    keyboard = []
    row = []
    
    for i, (emoji, name) in enumerate(SERVERS.items()):
        btn = InlineKeyboardButton(emoji, callback_data=f"server_{name}")
        row.append(btn)
        
        if (i + 1) % 3 == 0:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = create_main_menu()
    
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç KF Black Russia!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
‚Ä¢ üìã RR –ª–∏—Å—Ç - –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è RR –ª–∏—Å—Ç–∞
‚Ä¢ üè• PD –ª–∏—Å—Ç - –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è PD –ª–∏—Å—Ç–∞
‚Ä¢ üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏—Å—Ç—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å 00:00 –¥–æ 05:00 –¥–ª—è RR –∏ —Å 05:01 –¥–æ 23:59 –¥–ª—è PD.

üì¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:
‚Ä¢ RR –ª–∏—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ 00:00
‚Ä¢ PD –ª–∏—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ 05:00
    """
    
    await update.message.reply_text(welcome_text, reply_markup=keyboard)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
    help_text = """
üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

1. **RR –ª–∏—Å—Ç** (00:00 - 05:00 –ú–°–ö):
   - –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä
   - –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Å–ª–µ—Ç–∞–µ—Ç

2. **PD –ª–∏—Å—Ç** (05:01 - 23:59 –ú–°–ö):
   - –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–î–æ–º–∞/–ì–∞—Ä–∞–∂–∏)
   - –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è
   - –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä
   - –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Å–ª–µ—Ç–∞–µ—Ç

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:
‚Ä¢ RR: —Å 00:00 –¥–æ 05:00
‚Ä¢ PD: —Å 05:01 –¥–æ 23:59

üì¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:
‚Ä¢ RR –ª–∏—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ 00:00
‚Ä¢ PD –ª–∏—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ 05:00

–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –ª–∏—Å—Ç–∞.
    """
    
    keyboard = create_main_menu()
    await update.message.reply_text(help_text, reply_markup=keyboard)

async def format_rr_list():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç RR –ª–∏—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞"""
    if not rr_entries:
        return "üìã RR –õ–∏—Å—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—É—Å—Ç"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
    servers_data = {}
    for entry in rr_entries:
        server = entry['server']
        if server not in servers_data:
            servers_data[server] = []
        servers_data[server].append(entry)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üö® <b>RR –õ–ò–°–¢</b> üö®\n"
    text += "‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: 00:00 –ú–°–ö\n\n"
    
    for server, entries in servers_data.items():
        text += f"üéÆ <b>{server}</b>:\n"
        for i, entry in enumerate(entries, 1):
            text += f"   {i}. {entry.get('description', '–°–ª—ë—Ç')}\n"
        text += "\n"
    
    text += f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(rr_entries)}"
    return text

async def format_pd_list():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç PD –ª–∏—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞"""
    if not pd_entries:
        return "üè• PD –õ–∏—Å—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—É—Å—Ç"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    houses_data = {}
    garages_data = {}
    
    for entry in pd_entries:
        time_key = entry['time']
        category = entry['category']
        server = entry['server']
        
        if category == 'house':
            if time_key not in houses_data:
                houses_data[time_key] = {}
            if server not in houses_data[time_key]:
                houses_data[time_key][server] = []
            houses_data[time_key][server].append(entry)
        else:
            if time_key not in garages_data:
                garages_data[time_key] = {}
            if server not in garages_data[time_key]:
                garages_data[time_key][server] = []
            garages_data[time_key][server].append(entry)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üè• <b>PD –õ–ò–°–¢</b> üè•\n"
    text += "‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: 05:00 –ú–°–ö\n\n"
    
    # –î–æ–º–∞
    if houses_data:
        text += "üè† <b>–î–û–ú–ê</b>:\n"
        for time_key in sorted(houses_data.keys()):
            text += f"   ‚è∞ <b>{time_key}</b>:\n"
            for server, entries in houses_data[time_key].items():
                text += f"      üéÆ {server}: "
                descriptions = [entry.get('description', '–°–ª—ë—Ç') for entry in entries]
                text += ", ".join(descriptions) + "\n"
            text += "\n"
    
    # –ì–∞—Ä–∞–∂–∏
    if garages_data:
        text += "üöó <b>–ì–ê–†–ê–ñ–ò</b>:\n"
        for time_key in sorted(garages_data.keys()):
            text += f"   ‚è∞ <b>{time_key}</b>:\n"
            for server, entries in garages_data[time_key].items():
                text += f"      üéÆ {server}: "
                descriptions = [entry.get('description', '–°–ª—ë—Ç') for entry in entries]
                text += ", ".join(descriptions) + "\n"
            text += "\n"
    
    text += f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(pd_entries)}"
    return text

async def post_rr_list(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ RR –ª–∏—Å—Ç–∞ –≤ 00:00"""
    if rr_entries:
        rr_text = await format_rr_list()
        try:
            await context.bot.send_message(
                chat_id=CHAT_ID,
                text=rr_text,
                parse_mode='HTML'
            )
            logging.info("‚úÖ RR –ª–∏—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª")
            rr_entries.clear()  # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ RR –ª–∏—Å—Ç–∞: {e}")
    else:
        logging.info("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è RR –ª–∏—Å—Ç–∞")

async def post_pd_list(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ PD –ª–∏—Å—Ç–∞ –≤ 05:00"""
    if pd_entries:
        pd_text = await format_pd_list()
        try:
            await context.bot.send_message(
                chat_id=CHAT_ID,
                text=pd_text,
                parse_mode='HTML'
            )
            logging.info("‚úÖ PD –ª–∏—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª")
            pd_entries.clear()  # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PD –ª–∏—Å—Ç–∞: {e}")
    else:
        logging.info("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è PD –ª–∏—Å—Ç–∞")

async def schedule_posts(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    job_queue = application.job_queue
    
    # PD –ª–∏—Å—Ç –≤ 05:00
    job_queue.run_daily(
        post_pd_list,
        time=PD_POST_TIME,
        days=(0, 1, 2, 3, 4, 5, 6),
        name="post_pd_list"
    )
    
    # RR –ª–∏—Å—Ç –≤ 00:00
    job_queue.run_daily(
        post_rr_list,
        time=RR_POST_TIME,
        days=(0, 1, 2, 3, 4, 5, 6),
        name="post_rr_list"
    )
    
    logging.info(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: PD –≤ {PD_POST_TIME}, RR –≤ {RR_POST_TIME}")

async def view_lists_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    now = datetime.now(MOSCOW_TZ).time()
    
    if time(0, 0) <= now <= time(5, 0):
        # –í—Ä–µ–º—è RR
        if rr_entries:
            rr_text = await format_rr_list()
            text = f"üìã <b>–¢–µ–∫—É—â–∏–π RR –ª–∏—Å—Ç</b> (–±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ 00:00):\n\n{rr_text}"
        else:
            text = "üìã RR –ª–∏—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç"
    else:
        # –í—Ä–µ–º—è PD
        if pd_entries:
            pd_text = await format_pd_list()
            text = f"üè• <b>–¢–µ–∫—É—â–∏–π PD –ª–∏—Å—Ç</b> (–±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ 05:00):\n\n{pd_text}"
        else:
            text = "üè• PD –ª–∏—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç"
    
    keyboard = create_main_menu()
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='HTML')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "fill_rr":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è RR –ª–∏—Å—Ç–∞
        now = datetime.now(MOSCOW_TZ).time()
        if time(5, 1) <= now <= time(23, 59):
            await query.edit_message_text("‚ùå –°–µ–π—á–∞—Å –≤—Ä–µ–º—è –¥–ª—è PD –ª–∏—Å—Ç–∞!\nRR –ª–∏—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å 00:00 –¥–æ 05:00 –ú–°–ö.")
            return
        
        user_states[user_id] = {'type': 'rr', 'step': 'server'}
        keyboard = create_server_keyboard()
        await query.edit_message_text("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è RR –ª–∏—Å—Ç–∞:", reply_markup=keyboard)
        
    elif data == "fill_pd":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è PD –ª–∏—Å—Ç–∞
        now = datetime.now(MOSCOW_TZ).time()
        if time(0, 0) <= now <= time(5, 0):
            await query.edit_message_text("‚ùå –°–µ–π—á–∞—Å –≤—Ä–µ–º—è –¥–ª—è RR –ª–∏—Å—Ç–∞!\nPD –ª–∏—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å 05:01 –¥–æ 23:59 –ú–°–ö.")
            return
        
        user_states[user_id] = {'type': 'pd', 'step': 'category'}
        
        keyboard = [
            [InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="pd_house")],
            [InlineKeyboardButton("üöó –ì–∞—Ä–∞–∂–∏", callback_data="pd_garage")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text("üè• –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è PD –ª–∏—Å—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif data == "view_lists":
        await view_lists_command(update, context)
        return
    
    elif data == "help":
        await help_command(update, context)
        return
    
    elif data == "back_to_main":
        keyboard = create_main_menu()
        await query.edit_message_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    
    elif data.startswith("pd_"):
        if data in ["pd_house", "pd_garage"]:
            user_states[user_id]['step'] = 'time'
            user_states[user_id]['category'] = 'house' if 'house' in data else 'garage'
            
            category_name = "–î–æ–º–∞" if user_states[user_id]['category'] == 'house' else "–ì–∞—Ä–∞–∂–∏"
            
            if user_states[user_id]['category'] == 'house':
                keyboard = [
                    [InlineKeyboardButton("15:00", callback_data="time_15")],
                    [InlineKeyboardButton("17:00", callback_data="time_17")],
                    [InlineKeyboardButton("20:00", callback_data="time_20")],
                    [InlineKeyboardButton("22:00", callback_data="time_22")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="fill_pd")]
                ]
            else:
                keyboard = [
                    [InlineKeyboardButton("14:00", callback_data="time_14")],
                    [InlineKeyboardButton("16:00", callback_data="time_16")],
                    [InlineKeyboardButton("19:00", callback_data="time_19")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="fill_pd")]
                ]
            
            await query.edit_message_text(f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {category_name}:", reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif data.startswith("time_"):
        user_states[user_id]['step'] = 'server'
        time_map = {
            '14': '14:00', '15': '15:00', '16': '16:00', 
            '17': '17:00', '19': '19:00', '20': '20:00', '22': '22:00'
        }
        user_states[user_id]['time'] = time_map[data.split('_')[1]]
        
        keyboard = create_server_keyboard()
        await query.edit_message_text("üéÆ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:", reply_markup=keyboard)
    
    elif data.startswith("server_"):
        server_name = data.split('_', 1)[1]
        
        if user_states[user_id]['type'] == 'rr':
            # –î–ª—è RR –ª–∏—Å—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            rr_entry = {
                'server': server_name,
                'description': '–°–ª—ë—Ç',
                'timestamp': datetime.now(MOSCOW_TZ)
            }
            rr_entries.append(rr_entry)
            
            rr_text = await format_rr_list()
            response_text = f"""
‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ RR –ª–∏—Å—Ç!

–°–µ—Ä–≤–µ—Ä: {server_name}
–¢–∏–ø: RR –ª–∏—Å—Ç

üìã –ó–∞–ø–∏—Å—å –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ 00:00
–¢–µ–∫—É—â–∏–π RR –ª–∏—Å—Ç:
{rr_text}
            """
            
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏—Å—Ç—ã", callback_data="view_lists"),
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="fill_rr")
            ]])
            
            await query.edit_message_text(response_text, reply_markup=keyboard)
            
        else:
            # –î–ª—è PD –ª–∏—Å—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            category_name = "–î–æ–º–∞" if user_states[user_id]['category'] == 'house' else "–ì–∞—Ä–∞–∂–∏"
            time_selected = user_states[user_id]['time']
            
            pd_entry = {
                'server': server_name,
                'category': user_states[user_id]['category'],
                'time': time_selected,
                'description': '–°–ª—ë—Ç',
                'timestamp': datetime.now(MOSCOW_TZ)
            }
            pd_entries.append(pd_entry)
            
            pd_text = await format_pd_list()
            response_text = f"""
‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ PD –ª–∏—Å—Ç!

–°–µ—Ä–≤–µ—Ä: {server_name}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
–í—Ä–µ–º—è: {time_selected}

üè• –ó–∞–ø–∏—Å—å –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ 05:00
–¢–µ–∫—É—â–∏–π PD –ª–∏—Å—Ç:
{pd_text}
            """
            
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏—Å—Ç—ã", callback_data="view_lists"),
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="fill_pd")
            ]])
            
            await query.edit_message_text(response_text, reply_markup=keyboard)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_states:
            del user_states[user_id]

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    error_msg = str(context.error)
    logging.error(f"–û—à–∏–±–∫–∞: {error_msg}", exc_info=context.error)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ KF Black Russia...")
    logging.info(f"‚úÖ CHAT_ID: {CHAT_ID}")
    logging.info(f"‚úÖ –¢–æ–∫–µ–Ω: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    
    if not BOT_TOKEN:
        logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_error_handler(error_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
    asyncio.get_event_loop().run_until_complete(schedule_posts(application))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ polling
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
    application.run_polling(
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES
    )

if __name__ == "__main__":
    main()
